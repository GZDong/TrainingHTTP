加密算法：就是混淆规则
密钥：读懂混淆的关键信息

对称加密：正反使用相同规则，相同的密钥 产物：密文  经典算法：D(短)ES，AES
非对称加密：公钥+密钥，密钥只用来解密，加密算法一样，按照密钥的规则，一定能得到原文
对称缺陷：密钥需要发送给对方，所以是可以被截获的，也就是中间人攻击（伪装成发送方）
非对称：由被请求方先返回一个加密密钥（中间人其实还是可以伪装），双方都要公钥密钥
非对称：其实公钥加密后可以得到私钥解，其实反过来也可以，用私钥加密的，用公钥也可以解密

签名与验证，就是非对称反过来，密钥用来加密，密钥就是签名，只有发送方有，不经过网络传输（公钥对方有），
公钥解密就是验证，但是验证就必须要有原文，所以这个过程得有原文

非对称，虽然不能解密，但是拿到公钥，就可以伪装发送方了，这样就可以了，所以结合签名就OK了，也就是拿发送
方的的密钥来验证身份
非对称：RSA，DSA（只有签名的、更快的）
ES都是上下对称，SA不是，为非对称（用于记忆）
密钥----key

Base64: + / A-Z a-z 0-9, 64个字符（末尾不够用=），将原字符的字节数的3/4（6位）的10数变成新的字符，6个0刚好是64个，所以
一定可以转化；用途：1010变成字符串，方便一些非文本数据的传输，对原本就是文本的数据，也起反偷窥
“Base64加密传输图片高效安全”：错误，不安全，也不高效，体积提升1/3，它的功能只是让“不能”变成“能”，用文本转非文本
2进制数据：广义上是任何数据，侠义上是非文本数据，文本数据只是用来方便记忆的
Base58：去掉0OlI(太像)+/(双击复制出错)
URL encoding：对url中的path中的数据用%进行转码

压缩：把数据换一种方式来储存，以减少存储空间；解压：就是还原
常见压缩算法：DEFLATE（zip）、JPEG、MP3，文件尾缀会暴漏
编码：按照一套规则变成另外的信息，并且能够按一定的规则还原，所以压缩也是编码之一
媒体数据：图片写成jpg、png等
有损压缩：扣掉一部分数据，还能看，比如图片

序列化：数据对象转化为字节序列，将不连续数据变成连续的字节（二进制），用于存储和传输

Hash：把任意数据变成指定大小范围的数据，比如把200个person对象，用1-200代表，抽取部分人按顺序生成一个唯一的序列码（hash值），
如果中间有人插队，值就不同，Hash不可逆：实际上200个人会砍掉一部分
作用：摘要、数字指纹（这个数字指纹必须碰撞率低、不容易破解（指纹不好对应回去是谁））
经典算法（公开的）：MD5、SHA1、SHA256，就是用这些算法来制作Hash值，这样生成的数字指纹碰撞率低，不容易破解
实际用途：
1.数据完整性验证（拿到文件，比如APK，通过算法计算Hash值，如果和提供方一样的，就代表没被增减，没有损坏或篡改，比如MD5校验）
2.HashMap的key其实就是hash值，叫hashCode，就是一个值，可以方便的代替各种对象；每个对象的hashCode可以定义生成方式
3.保护隐私，比如明文密码，数据库泄露，密码就泄露了，使用Hash值就不会了，Hash不能逆向，所以密码忘记只能重置
彩虹表：储存常见的、Hash算法下对应原文
对应彩虹表：加yan，就是原数据都经过各自的服务器加点东西在Hash

实际上，非对称，签名信息是会导致数据翻倍的，所以使用对原数据进行Hash，拿到Hash值，然后对Hash进行签名，
对方使用Hash值为结果进行校验就可以了

字符集：一个由整数向现实世界中的文字符号的Map
ASC2：128个字符，1字节，太小
ISO-8859-1：对ASC2进行扩展，还是1字节
Unicode：13万个字节，多字节
  UTF-8和UTF-16是Unicode的具体的编码方式，映射方式，Unicode只是字符集
GBK/GB2312/GB18030：国标，字符集和编码方式一体